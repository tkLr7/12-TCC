import java_cup.runtime.*;

/*
=> init with {: ... :}
   Código que será inserido dentro do construtor da classe 
   do analisador sintático; por isso, executado no início. 
*/
init with {: 
  System.out.println("Resultado:");
:}

/* 
=> parser code {: ... :}:
   Permite incluir um método main() diretamente dentro da 
   classe do analisador sintático, dispensando a criação de 
   uma classe principal (Main) com o método main().

   O próprio analisador sintático será responsável por iniciar 
   a execução.
*/
parser code {:
  //Atributo da classe do analisador sintático:
  private String nomeDoArquivo;

  // Novo construtor personalizado do analisador sintático:
  public MeuParser(java_cup.runtime.Scanner meuScanner, String nomeDoArquivo) {
    super(meuScanner);
    this.nomeDoArquivo = nomeDoArquivo;
  }

  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }
:}

/*
=> action code {: ... :}
   Área para funções auxiliares, útil se quiser separar lógica.
*/
action code {:
  private Integer somar(Integer a, Integer b) {
    return a.intValue() + b.intValue();
  }

  private Integer subtrair(Integer a, Integer b) {
    return a.intValue() - b.intValue();
  }

  private Integer inverterSinal(Integer a) {
    return -a;
  }
:}

// TERMINAIS
terminal ABRE, FECHA, FECHA_ABRE, AUTO_FECHA, IGUAL;
terminal String ID, STRING, TEXTO;

// NAO TERMINAIS
non terminal elemento_html, lista_atributos, atributo, conteudo;

start with elemento_html;

elemento_html ::= ABRE ID:t lista_atributos:a FECHA conteudo:c FECHA_ABRE ID:t2 FECHA
                  {: System.out.println("TAG: <" + t + ">\n  Atributos: " + (a == null ? "Nenhum" : "\n" + a) + "  Conteúdo: '" + c + "'\nFECHAMENTO: </" + t2 + ">"); :}
                | ABRE ID:t lista_atributos:a AUTO_FECHA
                  {: System.out.println("TAG DE AUTO-FECHAMENTO: <" + t + "/>\n  Atributos: " + (a == null ? "Nenhum" : "\n" + a)); :}
                ;

lista_atributos ::= lista_atributos:l atributo:a {: RESULT = l; :} | atributo:a {: :};

atributo ::= ID:n IGUAL STRING:v {: System.out.print("    - " + n + " = \"" + v + "\"\n"); :};

conteudo ::= TEXTO:t {: :} | {: :};
/*
Usar %prec:
  É importante quando um mesmo token tem dois significados 
  diferentes (como o - unário i binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática i a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/